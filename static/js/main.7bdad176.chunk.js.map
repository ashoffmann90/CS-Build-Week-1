{"version":3,"sources":["index.js"],"names":["Button","styled","button","FlexRowWrapper","div","Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","r","rows","c","boxId","gridFull","push","key","style","Main","gridCopy","arrayClone","state","setState","reset","Math","floor","random","resetButton","clear","clearButton","grid","Array","fill","map","generation","stopButton","clearInterval","intervalId","startButton","setInterval","play","speed","slowButton","slow","fastButton","fast","g","g2","count","arr","JSON","parse","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2iBAKA,IAAMA,EAASC,IAAOC,OAAV,KAWNC,EAAiBF,IAAOG,IAAV,KAKdC,E,4MACJC,UAAY,WACV,EAAKC,MAAMD,UAAU,EAAKC,MAAMC,IAAK,EAAKD,MAAME,M,uDAIhD,OACE,yBAAKC,UAAaC,KAAKJ,MAAMK,SAC7BC,GAAMF,KAAKJ,MAAMM,GACjBC,QAAWH,KAAKL,gB,GATJS,IAAMC,WAelBC,E,uKAMF,IAJA,IAAMC,EAA0B,GAAlBP,KAAKJ,MAAMY,KACrBC,EAAU,GAEVR,EAAW,GACNS,EAAI,EAAGA,EAAIV,KAAKJ,MAAMe,KAAMD,IACnC,IAAK,IAAIE,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMY,KAAMI,IAAI,CACvC,IAAIC,EAAQH,EAAI,IAAME,EACtBX,EAAWD,KAAKJ,MAAMkB,SAASJ,GAAGE,GAAK,SAAW,UAClDH,EAAQM,KACN,kBAACrB,EAAD,CACAO,SAAYA,EACZe,IAAOH,EACPA,MAASA,EACThB,IAAOa,EACPZ,IAAOc,EACPjB,UAAaK,KAAKJ,MAAMD,aAM9B,OACE,yBAAKI,UAAY,OAAOkB,MAAS,CAACV,MAAOA,IACtCE,O,GAzBUL,IAAMC,WA+BnBa,E,kDACJ,aAAc,IAAD,8BACX,gBAWFvB,UAAY,SAACE,EAAKC,GAChB,IAAIqB,EAAWC,EAAW,EAAKC,MAAMP,UACrCK,EAAStB,GAAKC,IAAQqB,EAAStB,GAAKC,GACpC,EAAKwB,SAAS,CACZR,SAAUK,KAhBD,EAoBbI,MAAQ,WAEN,IADA,IAAIJ,EAAWC,EAAW,EAAKC,MAAMP,UAC5BJ,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IACS,IAAlCY,KAAKC,MAAsB,EAAhBD,KAAKE,YAClBP,EAAST,GAAGE,IAAK,GAIvB,EAAKU,SAAS,CACZR,SAAUK,KA9BD,EAkCbQ,YAAc,WACZ,EAAKC,QACL,EAAKL,SApCM,EAuCbM,YAAc,WACZ,EAAKD,SAxCM,EA2CbA,MAAQ,WACN,IAAIE,EAAOC,MAAM,EAAKpB,MAAMqB,OAAOC,KAAI,kBAAMF,MAAM,EAAKvB,MAAMwB,MAAK,MACnE,EAAKV,SAAS,CACZR,SAAUgB,EACVI,WAAY,KA/CH,EAmDbC,WAAa,WACXC,cAAc,EAAKC,aApDR,EAuDbC,YAAc,WACZF,cAAc,EAAKC,YACnB,EAAKA,WAAaE,YAAY,EAAKC,KAAM,EAAKC,QAzDnC,EA4DbC,WAAa,WACX,EAAKC,QA7DM,EAgEbC,WAAa,WACX,EAAKC,QAjEM,EAoEbF,KAAO,WACL,EAAKF,MAAQ,IACb,EAAKH,eAtEM,EAyEbO,KAAO,WACL,EAAKJ,MAAQ,IACb,EAAKH,eA3EM,EA8EbE,KAAO,WAIL,IAHA,IAAIM,EAAI,EAAKzB,MAAMP,SACfiC,EAAK3B,EAAW,EAAKC,MAAMP,UAEtBJ,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAAI,CACjC,IAAIoC,EAAQ,EACRtC,EAAI,GAAOoC,EAAEpC,EAAI,GAAGE,IAAIoC,IACxBtC,EAAG,GAAKE,EAAG,GAAOkC,EAAEpC,EAAI,GAAGE,EAAI,GAAGA,EAAI,IAAIoC,IAC1CtC,EAAI,GAAKE,EAAI,EAAKJ,KAAO,GAAOsC,EAAEpC,EAAI,GAAGE,EAAI,IAAIoC,IACjDpC,EAAI,EAAKJ,KAAO,GAAOsC,EAAEpC,GAAGE,EAAI,IAAIoC,IACpCpC,EAAI,GAAOkC,EAAEpC,GAAGE,EAAI,IAAIoC,IACxBtC,EAAI,EAAKC,KAAO,GAAOmC,EAAEpC,EAAI,GAAGE,EAAI,IAAIoC,IACxCtC,EAAI,EAAKC,KAAO,GAAKC,EAAI,GAAOkC,EAAEpC,EAAI,GAAGE,EAAI,IAAIoC,IACjDtC,EAAI,EAAKC,KAAO,GAAK,EAAKH,KAAO,GAAOsC,EAAEpC,EAAI,GAAGE,EAAI,IAAIoC,IACzDF,EAAEpC,GAAGE,KAAOoC,EAAQ,GAAKA,EAAQ,KAAID,EAAGrC,GAAGE,IAAK,GAC/CkC,EAAEpC,GAAGE,IAAgB,IAAVoC,IAAaD,EAAGrC,GAAGE,IAAK,GAG5C,EAAKU,SAAS,CACZR,SAAUiC,EACVb,WAAY,EAAKb,MAAMa,WAAa,KAjGtC,EAAKO,MAAQ,IACb,EAAK9B,KAAO,GACZ,EAAKH,KAAO,GAEZ,EAAKa,MAAQ,CACXa,WAAY,EACZpB,SAAUiB,MAAM,EAAKpB,MAAMqB,OAAOC,KAAI,kBAAMF,MAAM,EAAKvB,MAAMwB,MAAK,OARzD,E,gEAwGXhC,KAAKuB,U,+BAIL,OACE,6BACE,wBAAIxB,UAAY,SAAhB,yBACA,kBAACO,EAAD,CACAQ,SAAYd,KAAKqB,MAAMP,SACvBH,KAAQX,KAAKW,KACbH,KAAQR,KAAKQ,KACbb,UAAaK,KAAKL,YAElB,kBAACH,EAAD,KACA,kBAACH,EAAD,CACAc,QAAWH,KAAKmC,YADhB,QAGA,kBAAC9C,EAAD,CACAc,QAAWH,KAAKsC,aADhB,SAGA,kBAACjD,EAAD,CACAc,QAAWH,KAAK2B,aADhB,eAGA,kBAACtC,EAAD,CACAc,QAAWH,KAAK6B,aADhB,cAGA,kBAACxC,EAAD,CACAc,QAAWH,KAAK0C,YADhB,UAGA,kBAACrD,EAAD,CACAc,QAAWH,KAAK4C,YADhB,WAIA,wBAAI7C,UAAY,QAAhB,gBAAqCC,KAAKqB,MAAMa,iB,GA1IrC9B,IAAMC,WAgJzB,SAASe,EAAW6B,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAGnCI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACrC,EAAD,OAEFsC,SAASC,eAAe,U","file":"static/js/main.7bdad176.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport './index.css';\n\nconst Button = styled.button`\n  background-color: white;\n  &:hover {\n    background-color: #c32aff;\n    color: white\n  }\n  width: 30%;\n  height: 3em;\n  margin-top: 15px;\n`;\n\nconst FlexRowWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nclass Box extends React.Component{\n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.col)\n  }\n\n  render(){\n    return(\n      <div className = {this.props.boxClass}\n      id = {this.props.id}\n      onClick = {this.selectBox}\n      />  \n    )\n  }\n}\n\nclass Grid extends React.Component{\n  render(){\n    const width = this.props.cols * 16\n    var rowsArr = []\n\n    var boxClass = ''\n    for (var r = 0; r < this.props.rows; r++){\n      for (var c = 0; c < this.props.cols; c++){\n        let boxId = r + \"_\" + c\n        boxClass = this.props.gridFull[r][c] ? \"box on\" : \"box off\"\n        rowsArr.push(\n          <Box\n          boxClass = {boxClass}\n          key = {boxId}\n          boxId = {boxId}\n          row = {r}\n          col = {c}\n          selectBox = {this.props.selectBox}\n          />\n        )\n      }\n    }\n\n    return(\n      <div className = 'grid' style = {{width: width}}>\n        {rowsArr}\n      </div>\n    )\n  }\n}\n\nclass Main extends React.Component{\n  constructor(){\n    super()\n    this.speed = 300\n    this.rows = 30\n    this.cols = 44\n\n    this.state = {\n      generation: 0,\n      gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n    }\n  }\n\n  selectBox = (row, col) => {\n    let gridCopy = arrayClone(this.state.gridFull)\n    gridCopy[row][col] = !gridCopy[row][col]\n    this.setState({\n      gridFull: gridCopy\n    })\n  }\n\n  reset = () => {\n    let gridCopy = arrayClone(this.state.gridFull)\n    for (let r = 0; r < this.rows; r++){\n      for (let c = 0; c < this.cols; c++){\n        if (Math.floor(Math.random() * 4) === 1){\n          gridCopy[r][c] = true\n        }\n      }\n    }\n    this.setState({\n      gridFull: gridCopy\n    })\n  }\n\n  resetButton = () => {\n    this.clear()\n    this.reset()\n  }\n  \n  clearButton = () => {\n    this.clear()\n  }\n\n  clear = () => {\n    var grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n    this.setState({\n      gridFull: grid,\n      generation: 0\n    })\n  }\n\n  stopButton = () => {\n    clearInterval(this.intervalId)\n  }\n\n  startButton = () => {\n    clearInterval(this.intervalId)\n    this.intervalId = setInterval(this.play, this.speed)\n  }\n\n  slowButton = () => {\n    this.slow()\n  }\n\n  fastButton = () => {\n    this.fast()\n  }\n\n  slow = () => {\n    this.speed = 1000\n    this.startButton()\n  }\n\n  fast = () => {\n    this.speed = 100\n    this.startButton()\n  }\n\n  play = () => {\n    let g = this.state.gridFull\n    let g2 = arrayClone(this.state.gridFull)\n\n    for (let r = 0; r < this.rows; r++){\n      for (let c = 0; c < this.cols; c++){\n        let count = 0\n        if (r > 0) if (g[r - 1][c]) count++\n        if (r> 0 && c> 0) if (g[r - 1][c - 1][c + 1]) count++\n        if (r > 0 && c < this.cols - 1) if (g[r - 1][c + 1]) count++\n        if (c < this.cols - 1) if (g[r][c + 1]) count++\n        if (c > 0) if (g[r][c - 1]) count++\n        if (r < this.rows - 1) if (g[r + 1][c - 1]) count++\n        if (r < this.rows - 1 && c > 0) if (g[r + 1][c - 1]) count++\n        if (r < this.rows - 1 && this.cols - 1) if (g[r + 1][c + 1]) count++ \n        if (g[r][c] && (count < 2 || count > 3)) g2[r][c] = false\n        if (!g[r][c] && count === 3) g2[r][c] = true\n      }\n    }\n    this.setState({\n      gridFull: g2,\n      generation: this.state.generation + 1\n    })\n  }\n\n  componentDidMount(){\n    this.reset()\n  }\n\n  render(){\n    return(\n      <div>\n        <h1 className = 'title'>Conway's Game of Life</h1>\n        <Grid\n        gridFull = {this.state.gridFull}\n        rows = {this.rows}\n        cols = {this.cols}\n        selectBox = {this.selectBox}\n        />\n        <FlexRowWrapper>\n        <Button\n        onClick = {this.stopButton}\n        >Stop</Button>\n        <Button\n        onClick = {this.startButton}\n        >Start</Button>\n        <Button\n        onClick = {this.resetButton}\n        >Reset Cells</Button>\n        <Button\n        onClick = {this.clearButton}\n        >Clear Grid</Button>\n        <Button\n        onClick = {this.slowButton}\n        >Slower</Button>\n        <Button\n        onClick = {this.fastButton}\n        >Faster</Button>\n        </FlexRowWrapper>\n        <h2 className = 'gens'>Generations: {this.state.generation}</h2>\n      </div>\n    )\n  }\n}\n\nfunction arrayClone(arr){\n  return JSON.parse(JSON.stringify(arr))\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}